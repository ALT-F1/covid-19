# -*- coding: utf-8 -*-
"""daily_geographic_distribution_of_covid-19_cases_worldwide-v0.0.1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ciP32sdS3_mBp2YS6gNikLkrQx9LSBa6

# Display charts about the geographic distribution of COVID-19 cases worldwide


> ECDC Dashboard : http://bit.ly/38Ysgum

> Data source is "today’s data on the geographic distribution of COVID-19 cases worldwide": http://bit.ly/2U9YcGS
"""

# setup the python program
import pandas as pd
import numpy as np
from plotly.offline import iplot
import plotly.graph_objs as go
from datetime import datetime, timedelta
import locale
locale.setlocale(locale.LC_ALL, '')
import urllib.request, urllib.error

"""# Load the LATEST data from the European Center for Disease Prevention and Control (ECDC)"""

def check_if_data_source_exists(url):
  """
  check if an url exists
  """
  url_exists = False
  try:
    conn = urllib.request.urlopen(url)
  except urllib.error.HTTPError as e:
      # Return code error (e.g. 404, 501, ...)
      # ...
      print('HTTPError: {}'.format(e.code))
      url_exists = False
  except urllib.error.URLError as e:
      # Not an HTTP-specific error (e.g. connection refused)
      # ...
      print('URLError: {}'.format(e.reason))
      url_exists = False
  else:
      # 200
      # ...
      print('The url exists')
      url_exists = True
  return url_exists

def find_latest_datasource(url):
  """
  find the latest datasource starting today from the ECDC website

  format of the url: 
    https://www.ecdc.europa.eu/sites/default/files/documents/COVID-19-geographic-disbtribution-worldwide-2020-03-17.xlsx
    https://www.ecdc.europa.eu/sites/default/files/documents/COVID-19-geographic-disbtribution-worldwide-%latest_datasource_date%.xlsx

  """
  is_found=False
  i=-1
  latest_datasource_date = (datetime.now() - timedelta(i)).strftime('%Y-%m-%d')
  while is_found == False and i<5:
    i += 1
    latest_datasource_date = (datetime.now() - timedelta(i)).strftime('%Y-%m-%d')
    
    datasource_url = url.replace('%latest_datasource_date%', latest_datasource_date)
    print(f'Search for this latest date: {latest_datasource_date}',
          f'datasource_url: {datasource_url}')
    is_found = check_if_data_source_exists(datasource_url)

  if is_found == True:
    print(f'Download the data until : {latest_datasource_date}')
    return datasource_url
  else:
    return None

# load the data
datasource_url_template = "https://www.ecdc.europa.eu/sites/default/files/documents/COVID-19-geographic-disbtribution-worldwide-%latest_datasource_date%.xlsx"
if datasource_url_template is None:
  print(f'There is no datasource on the ECDC website. is https://www.ecdc.europa.eu down?')
  exit
datasource_url = find_latest_datasource(datasource_url_template)

df = pd.read_excel(datasource_url)

"""# What is the range of data that has been collected from the ECDC?"""

start_date = df.DateRep.min().strftime("%b %d %Y")
end_date = df.DateRep.max().strftime("%b %d %Y")

print(
    f'DATE RANGE:\n',
    f'start date : {start_date}\n', 
    f'end date : {end_date}'
      )

"""# Display Totals : Confirmed Cases and Deaths"""

cv19_countries_day = df.groupby(by=['DateRep','Countries and territories']).sum()[['Cases','Deaths']]
Total_confirmed = cv19_countries_day.groupby('DateRep').sum()[['Cases','Deaths']].sum()['Cases']
Total_deaths = cv19_countries_day.groupby('DateRep').sum()[['Cases','Deaths']].sum()['Deaths']
print(f"{end_date}:\n Total Confirmed Cases: {Total_confirmed:n}\n Total Deaths: {Total_deaths:n}")

"""# Group the data by daily-New Confirmed Cases (WW)"""

cv19_countries_day_new_confirmed_cases = df.groupby(by=['DateRep'], as_index=False)['Cases'].sum()
print(f'WW New Confirmed cases first-5 records:\n\n {cv19_countries_day_new_confirmed_cases.head(5)}')
print(f'\nWW New Confirmed cases last-5 records:\n\n {cv19_countries_day_new_confirmed_cases.tail(5)}')

"""# Group the data by daily Deaths (WW)"""

cv19_countries_day_new_deaths = df.groupby(by=['DateRep'], as_index=False)['Deaths'].sum()
print(f'WW New Deaths first-5 records:\n\n {cv19_countries_day_new_deaths.head(5)}')
print(f'nWW New Deaths last-5 records:\n\n {cv19_countries_day_new_deaths.tail(5)}')

"""# Draw a chart with daily New Confirmed Cases and Deaths"""

data = [
        go.Scatter(
        name="WW New Confirmed cases",
        x=cv19_countries_day_new_confirmed_cases['DateRep'],
        y=cv19_countries_day_new_confirmed_cases['Cases']
        ),
        go.Scatter(
        name="WW New Deaths",
        x=cv19_countries_day_new_deaths['DateRep'],
        y=cv19_countries_day_new_deaths['Deaths']
        ),
]

# plot titles and axis labels
layout = go.Layout(
    title=f'Worldwide New Confirmed cases and Deaths',
    xaxis=dict(
        title='Date'
    ),
    yaxis=dict(
        title='New Confirmed cases/New Deaths'
    )
)

# plot the Figure object using the 'iplot' method
fig = go.Figure(data=data, layout=layout)
iplot(fig)

"""# Build charts to compare two countries: Italy and Belgium"""

df_italy = df[df['Countries and territories']=="Italy"]
df_belgium = df[df['Countries and territories']=="Belgium"]

"""# Draw a chart including New Confirmed Cases in Italy and Belgium

## Some hints regarding the dynamic charts

> functions are available on the top-left of the screen. Click on the buttons

> the user can zoom in/zoom out

> click on a legend e.g., new confirmed cases (on the right) and focus on one single dataset

> click-and-drag your mouse to zoom on a dedicated area

> double click on the chart to reset the zoom
"""

# use the DataFrame columns for generating data
data = [
        go.Bar(
        name="New Confirmed cases in Italy",
        x=df_italy['DateRep'],
        y=df_italy['Cases']
    ),
    go.Bar(
        name="New Confirmed cases in Belgium",
        x=df_belgium['DateRep'],
        y=df_belgium['Cases']
    )
]

# plot titles and axis labels
layout = go.Layout(
    title=f'New Confirmed cases in Belgium and in Italy',
    xaxis=dict(
        title='Date'
    ),
    yaxis=dict(
        title='New confirmed cases'
    )
)

# plot the Figure object using the 'iplot' method
fig = go.Figure(data=data, layout=layout)
iplot(fig)

"""# Draw a chart with daily deaths in Italy and Belgium  :-("""

# use the DataFrame columns for generating data
data = [
    go.Bar(
        name="New deaths in Italy",
        x=df_italy['DateRep'],
        y=df_italy['Deaths']
    ),
    go.Bar(
        name="New deaths in Belgium",
        x=df_belgium['DateRep'],
        y=df_belgium['Deaths']
    )
]

# plot titles and axis labels
layout = go.Layout(
    title=f'New deaths in Italy and Belgium',
    xaxis=dict(
        title='Date'
    ),
    yaxis=dict(
        title='New deaths'
    )
)

# plot the Figure object using the 'iplot' method
fig = go.Figure(data=data, layout=layout)
iplot(fig)
#fig.show(renderer='svg')

"""# Are they Correlations between Italy and Belgium?"""

def display_correlation(df, selected_citizenship= 'Belgian', method='pearson'):
  correlation = df['Cases'].corr(df['Deaths'], method=method)
  print(f"correlation using '{method}'' method between '{selected_citizenship}' 'New cases' and 'Deaths': {correlation}")

display_correlation(df_belgium, 'Belgian', method='pearson')
display_correlation(df_italy, 'Italian', method='pearson')

"""# CHANGELOG

v.0.0.1 
  
> ECDC has changed the format of the file

    > filename is renamed *.xls into *.xlsx
  
    > renamed fields: CountryExp -> Countries and territories, NewConfCases -> Cases, Newdeaths -> Deaths
  
    > removed fields: Gaul1Nuts1, EU

v.0.0.0 

    > display charts for the World, Belgium and Italy

# LICENSE

(c) 2010-2020 Abdelkrim Boujraf, alt-f1 sprl <http://www.alt-f1.be>, Abdelkrim Boujraf <http://www.alt-f1.be/literature.html>

This work is licensed under a Creative Commons Attribution 4.0 International License: <http://creativecommons.org/licenses/by/4.0>

* Share — copy and redistribute the material in any medium or format 
* Adapt — remix, transform, and build upon the material for any purpose, even commercially

Vous êtes autorisé à <https://creativecommons.org/licenses/by/4.0/deed.fr>: 

* Partager : copier, distribuer et communiquer le matériel par tous moyens et sous tous formats
* Adapter : remixer, transformer et créer à partir du matériel pour toute utilisation, y compris commerciale
"""

